package home.tries.planets.model.entities;

import home.utils.ImpossibleException;

import javax.persistence.*;

@Entity
@Table(name = "planets")
public class Planet {
    private final static class PlanetPrototype extends Planet {
        private PlanetPrototype() {
            super.setPlID(null); // will be autogenerated
            super.setNew(true);
            super.setName("{ unspecified }");
            super.setDiscovererName("{ unspecified }");
            super.setDiameter(1.0);
            super.setDistToEarth(1.0);
            super.setDeleted(false);
        }
        @Override public void setPlID(Integer _plID) { throw new UnsupportedOperationException(); }
        @Override public void setName(String _name) { throw new UnsupportedOperationException(); }
        @Override public void setDistToEarth(Double _distToEarth) { throw new UnsupportedOperationException(); }
        @Override public void setDiscovererName(String _discovererName) { throw new UnsupportedOperationException(); }
        @Override public void setDiameter(Double _diameter) { throw new UnsupportedOperationException(); }
        @Override public void setAtmosphere(boolean _atmosphere) { throw new UnsupportedOperationException(); }
        @Override public void setDeleted(Boolean _deleted) { throw new UnsupportedOperationException(); }
        @Override public void setNew(boolean _new) { throw new UnsupportedOperationException(); }
    }
    public final static PlanetPrototype DEFAULT_PROTOTYPE = new PlanetPrototype();

    // ================================
    // NON-STATIC STUFF
    @Id
    @GeneratedValue(strategy= GenerationType.SEQUENCE, generator="planets_pk_seq")
    @SequenceGenerator(name = "planets_pk_seq", sequenceName = "planets_pk_seq", allocationSize = 1)
    @Column(name = "planet_id", nullable = false)
    private Integer plID;
    @Column(name = "name", nullable = false)
    private String name;
    @Column(name = "dist_to_earth", nullable = false)
    private Double distToEarth;
    @Column(name = "discoverer_name", nullable = true)
    private String discovererName;
    @Column(name = "diameter", nullable = false)
    private Double diameter;
    @Column(name = "atmosphere", nullable = false)
    private boolean atmosphere;
    @Column(name = "is_deleted", nullable = false)
    private Boolean deleted = false;
    @Transient
    private boolean isNew = false; // assume we usually use non-new planet-entries

    // ================================
    // CONSTRUCTORS

    public Planet() {}

    public static Planet dfltNew() {
        Planet ret = new Planet();
        ret.setAtmosphere(DEFAULT_PROTOTYPE.isAtmosphere());
        ret.setPlID(DEFAULT_PROTOTYPE.getPlID());
        ret.setDeleted(DEFAULT_PROTOTYPE.isDeleted());
        ret.setDiameter(DEFAULT_PROTOTYPE.getDiameter());
        ret.setDiscovererName(DEFAULT_PROTOTYPE.getDiscovererName());
        ret.setDistToEarth(DEFAULT_PROTOTYPE.getDistToEarth());
        ret.setName(DEFAULT_PROTOTYPE.getName());
        ret.setNew(DEFAULT_PROTOTYPE.isNew());
        return ret;
    }

    // ================================
    // GETTERS/SETTERS

    public Planet getDflt() {
        return Planet.DEFAULT_PROTOTYPE;
    }

    public Integer getPlID() {
        return plID;
    }

    public void setPlID(Integer _plID) {
        plID = _plID;
    }

    public String getName() {
        return name;
    }

    public void setName(String _name) {
        name = _name;
    }

    public Double getDistToEarth() {
        return distToEarth;
    }

    public void setDistToEarth(Double _distToEarth) {
        distToEarth = _distToEarth;
    }

    public String getDiscovererName() {
        return discovererName;
    }

    public void setDiscovererName(String _discovererName) {
        discovererName = _discovererName;
    }

    public Double getDiameter() {
        return diameter;
    }

    public void setDiameter(Double _diameter) {
        diameter = _diameter;
    }

    public boolean isAtmosphere() {
        return atmosphere;
    }

    public void setAtmosphere(boolean _atmosphere) {
        atmosphere = _atmosphere;
    }

    public Boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean _deleted) {
        deleted = _deleted;
    }

    public boolean isNew() {
        return isNew;
    }

    public void setNew(boolean _new) {
        isNew = _new;
    }
    // ================================
    // METHODS

    // ================================
    // LOW-LEVEL OVERRIDES

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Planet)) return false;

        Planet that = (Planet) o;

        if (plID != that.plID) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return plID;
    }

    @Override
    public String toString() {
        return "Planet{" +
                "plID=" + plID +
                ", name='" + name + '\'' +
                ", distToEarth=" + distToEarth +
                ", discovererName='" + discovererName + '\'' +
                ", diameter=" + diameter +
                ", atmosphere=" + atmosphere +
                ", deleted=" + deleted +
                '}';
    }
}
